@{
    ViewData["Title"] = "Résultats des Méthodes de Machine Learning";
}

@{
    string ExtractNumber(object result)
    {
        if (result != null)
        {
            string resultString = result.ToString();
            try
            {
                dynamic jsonResult = Newtonsoft.Json.JsonConvert.DeserializeObject(resultString);
                if (jsonResult != null && jsonResult.accuracy != null)
                {
                    return jsonResult.accuracy.ToString();
                }
            }
            catch (Newtonsoft.Json.JsonReaderException)
            {
                // Handle JSON parse error
                return null;
            }
        }
        return null;
    }

    // Ensure values are strings and handle null values
    string analytiqueResult = ViewBag.Accuracy != null ? ViewBag.Accuracy.ToString().Replace(",", ".") : "0";
    string svmResult = ViewBag.ScoreSVM != null ? ViewBag.ScoreSVM.ToString().Replace(",", ".") : "0";
    string knnResult = ViewBag.ScoreKNN != null ? ViewBag.ScoreKNN.ToString().Replace(",", ".") : "0";
    string randomForestResult = ViewBag.ScoreRF != null ? ViewBag.ScoreRF.ToString().Replace(",", ".") : "0";
}
<!DOCTYPE html>
<html lang="fr">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>@ViewData["Title"]</title>
    <style>
        body {
            background-image: url('https://img.freepik.com/photos-gratuite/fond-noir-blanc-ondule_23-2150530922.jpg?t=st=1717037698~exp=1717041298~hmac=452300f8f38b62b2bd65008966f9bf20e3c814f2383e1f5d46a1a0867e7699ef');
            background-size: cover;
            background-repeat: no-repeat;
            background-attachment: fixed;
            color: black;
        }

        table {
            width: 100%;
            border-collapse: collapse;
            margin-bottom: 20px;
            background-color: #333; /* Dark background for tables */
        }

        th, td {
            border: 1px solid #ddd;
            padding: 8px;
            text-align: left;
            color: black;
            background-color: #faf0e6; /* Beige légèrement moins foncé */
        }

        th {
            background-color: navajowhite;
            color: black;
        }

        .result {
            background-color: rgba(0, 0, 0, 0.7);
            padding: 20px;
            margin-bottom: 20px;
            border-radius: 10px;
        }

        .flex-container {
            display: flex;
            flex-wrap: wrap;
        }

        .image-container {
            flex: 1 1 300px; /* Ajuster la largeur maximale des divs selon vos besoins */
            margin: 10px; /* Espacement entre les divs */
            text-align: center; /* Centrer le contenu */
        }

            .image-container img {
                max-width: 100%; /* Assurez-vous que les images ne dépassent pas leur conteneur */
            }

    </style>
    <script src="https://cdn.plot.ly/plotly-latest.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/html2pdf.js/0.10.1/html2pdf.bundle.min.js" integrity="sha512-GsLlZN/3F2ErC5ifS5QtgpiJtWd43JWSuIgh7mbzZ8zBps+dvLusV+eNQATqgA/HdeKFVgA5v3S/cIrLF7QnIg==" crossorigin="anonymous" referrerpolicy="no-referrer"></script>
</head>
<body>
    <h2>@ViewData["Title"]</h2>

    <div id="pdfContent">
        <table>
            <thead>
                <tr>
                    <th>Méthode</th>
                    <th>Score</th>
                    <th>Matrice de confusion</th>
                    <th>Temps d'exécution</th>
                    <th>Détails de classement</th>
                </tr>
            </thead>
            <tbody>
                @if (ViewBag.Accuracy != null && ViewBag.ExecutionTime != null)
                {
                    <tr>
                        <td>Analytique</td>
                        <td>@ViewBag.Accuracy</td>
                        <td></td> <!-- Add specific data if available -->
                        <td>@ViewBag.ExecutionTime</td>
                        <td></td> <!-- Add specific data if available -->
                    </tr>
                }
                @if (ViewBag.ScoreSVM != null)
                {
                    <tr>
                        <td>SVM</td>
                        <td>@ViewBag.ScoreSVM</td>
                        <td>
                            <table>
                                @foreach (var row in ViewBag.MatriceDeConfusionSVM)
                                {
                                    <tr>
                                        @foreach (var item in row)
                                        {
                                            <td>@item</td>
                                        }
                                    </tr>
                                }
                            </table>
                        </td>
                        <td>@ViewBag.TempsExecutionSVM</td>
                        <td>
                            <table>
                                <tr>
                                    <th>Tags</th>
                                    <th>Classé dans la boîte</th>
                                    <th>Devrait être classé dans la boîte</th>
                                </tr>
                                @foreach (var detail in ViewBag.DetailsClassementSVM)
                                {
                                    <tr>
                                        <td>@detail.Tags</td>
                                        <td>@detail["Classé dans la boîte"]</td>
                                        <td>@detail["Devrait être classé dans la boite"]</td>
                                    </tr>
                                }
                            </table>
                        </td>
                    </tr>
                }
                @if (ViewBag.ScoreKNN != null)
                {
                    <tr>
                        <td>KNN</td>
                        <td>@ViewBag.ScoreKNN</td>
                        <td>
                            <table>
                                @foreach (var row in ViewBag.MatriceDeConfusionKNN)
                                {
                                    <tr>
                                        @foreach (var item in row)
                                        {
                                            <td>@item</td>
                                        }
                                    </tr>
                                }
                            </table>
                        </td>
                        <td>@ViewBag.TempsExecutionKNN</td>
                        <td>
                            <table>
                                <tr>
                                    <th>Tags</th>
                                    <th>Classé dans la boîte</th>
                                    <th>Devrait être classé dans la boîte</th>
                                </tr>
                                @foreach (var detail in ViewBag.DetailsClassementKNN)
                                {
                                    <tr>
                                        <td>@detail.Tags</td>
                                        <td>@detail["Classé dans la boîte"]</td>
                                        <td>@detail["Devrait être classé dans la boite"]</td>
                                    </tr>
                                }
                            </table>
                        </td>
                    </tr>
                }
                @if (ViewBag.ScoreRF != null)
                {
                    <tr>
                        <td>Random Forest</td>
                        <td>@ViewBag.ScoreRF</td>
                        <td>
                            <table>
                                @foreach (var row in ViewBag.MatriceDeConfusionRF)
                                {
                                    <tr>
                                        @foreach (var item in row)
                                        {
                                            <td>@item</td>
                                        }
                                    </tr>
                                }
                            </table>
                        </td>
                        <td>@ViewBag.TempsExecutionRF</td>
                        <td>
                            <table>
                                <tr>
                                    <th>Tags</th>
                                    <th>Classé dans la boîte</th>
                                    <th>Devrait être classé dans la boîte</th>
                                </tr>
                                @foreach (var detail in ViewBag.DetailsClassementRF)
                                {
                                    <tr>
                                        <td>@detail.Tags</td>
                                        <td>@detail["Classé dans la boîte"]</td>
                                        <td>@detail["Devrait être classé dans la boite"]</td>
                                    </tr>
                                }
                            </table>
                        </td>
                    </tr>
                }
            </tbody>
        </table>

        <div id="chartContainer">
            <canvas id="resultChart" width="400" height="200"></canvas>
        </div>
    </div>

    <div class="flex-container">
        @if (ViewBag.ScoreSVM != null)
        {
            <div class="image-container">
                <p>Boîte à moustache SVM:</p>
                <img src="@ViewBag.CheminBoxPlotSVM" alt="BoxplotSVM des EPCs" />
            </div>
        }

        @if (ViewBag.ScoreKNN != null)
        {
            <div class="image-container">
                <p>Boîte à moustache KNN:</p>
                <img src="@ViewBag.CheminBoxPlotKNN" alt="BoxplotSVM des EPCs" />
            </div>

        }

        @if (ViewBag.ScoreRF != null)
        {
            <div class="image-container">
                <p>Boîte à moustache RF:</p>
                <img src="@ViewBag.CheminBoxPlotRF" alt="Aucun mauvais classement trouvé." />
            </div>
        }
    </div>

    <!--
    <div class="conteneur-bouton">
        <button type="submit" class="bouton-envoyer">Générer le PDF</button>
    </div>
    -->
    <script>
        document.addEventListener("DOMContentLoaded", function () {
            var ctx = document.getElementById('resultChart').getContext('2d');
            var chart = new Chart(ctx, {
                type: 'bar',
                data: {
                    labels: ['Analytique', 'SVM', 'KNN', 'Random Forest'],
                    datasets: [{
                        label: 'Précision',
                        data: [
        @analytiqueResult,
        @svmResult,
        @knnResult,
        @randomForestResult
                                                                ],
                        backgroundColor: [
                            'rgba(255, 99, 132, 0.2)',
                            'rgba(54, 162, 235, 0.2)',
                            'rgba(75, 192, 192, 0.2)',
                            'rgba(153, 102, 255, 0.2)'
                        ],
                        borderColor: [
                            'rgba(255, 99, 132, 1)',
                            'rgba(54, 162, 235, 1)',
                            'rgba(75, 192, 192, 1)',
                            'rgba(153, 102, 255, 1)'
                        ],
                        borderWidth: 1
                    }]
                },
                options: {
                    scales: {
                        y: {
                            beginAtZero: true
                        }
                    },
                    plugins: {
                        legend: {
                            labels: {
                                color: 'black' // Couleur des labels en noir
                            }
                        },
                        tooltip: {
                            bodyFontColor: 'black' // Couleur du texte du tooltip en noir
                        }
                    }
                }
            });
        });
    </script>

    <script>
        function generatePDF() {
            let element = document.querySelector('body');

            // Sauvegarder la position de défilement actuelle
            let scrollPosition = window.scrollY;

            // Forcer le défilement en haut de la page
            window.scrollTo(0, 0);

            // Définir les options pour html2pdf
            let opt = {
                margin: [0.5, 0.5, 0.5, 0.5],
                filename: 'chart.pdf',
                image: { type: 'jpeg', quality: 0.98 },
                html2canvas: {
                    scale: 2,
                    useCORS: true,
                    scrollX: 0,
                    scrollY: 0,
                    windowWidth: document.documentElement.scrollWidth,
                    windowHeight: document.documentElement.scrollHeight
                },
                jsPDF: {
                    unit: 'cm',
                    format: 'a4',
                    orientation: 'portrait'
                }
            };

            // Utiliser html2pdf pour convertir l'élément et générer le PDF
            html2pdf().set(opt).from(element).save().then(() => {
                // Restaurer la position de défilement
                window.scrollTo(0, scrollPosition);
            });
        }
    </script>
    <button onclick="generatePDF()" class="btn btn-primary" id="pdfButton">Télécharger le PDF</button>


</body>
</html>