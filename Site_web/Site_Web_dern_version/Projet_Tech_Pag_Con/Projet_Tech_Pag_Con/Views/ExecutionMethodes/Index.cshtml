@model IEnumerable<Projet_Tech_Pag_Con.Models.ExecutionMethode>

@{
    ViewData["Title"] = "Index";
}


<!DOCTYPE html>
<html>
<head>
    <style>
        body {
            background-image: url('https://img.freepik.com/photos-gratuite/fond-noir-blanc-ondule_23-2150530922.jpg?t=st=1717037698~exp=1717041298~hmac=452300f8f38b62b2bd65008966f9bf20e3c814f2383e1f5d46a1a0867e7699ef');
            background-size: cover; /* Make sure the image covers the whole page */
            background-repeat: no-repeat; /* Prevent the image from repeating */
            background-attachment: fixed; /* Ensure the background stays fixed when scrolling */
        }

        table {
            background-color: rgba(255, 255, 255, 0.8); /* Slightly transparent white background for the table to improve readability */
            border-collapse: collapse;
            width: 100%;
        }

        th, td {
            border: 1px solid #ddd;
            padding: 8px;
        }

        th {
            padding-top: 12px;
            padding-bottom: 12px;
            text-align: left;
            background-color: #4CAF50;
            color: black;
        }

        .btn-details {
            display: inline-block;
            padding: 6px 12px;
            font-size: 14px;
            font-weight: 400;
            line-height: 1.42857143;
            text-align: center;
            white-space: nowrap;
            vertical-align: middle;
            cursor: pointer;
            background-image: none;
            border: 1px solid #000; /* Couleur noire pour la bordure */
            color: #000; /* Couleur noire pour le texte */
            border-radius: 4px;
            transition: all 0.3s ease;
            position: relative; /* Permet de positionner l'élément enfant par rapport à ce bouton */
        }

            .btn-details::after {
                content: " Voir les détails"; /* Contenu du pseudo-élément */
                position: absolute; /* Position absolue par rapport à son parent */
                top: -20px; /* Décalage vers le haut pour le cacher initialement */
                left: 50%; /* Centre horizontalement */
                background-color: #000; /* Fond noir */
                color: #fff; /* Texte blanc */
                padding: 5px; /* Espacement du texte */
                border-radius: 5px; /* Coins arrondis */
                white-space: nowrap; /* Empêche le retour à la ligne */
                opacity: 0; /* Masque le texte initialement */
                transition: top 0.3s ease, opacity 0.3s ease; /* Animation de transition */
            }

            .btn-details:hover::after {
                top: -30px; /* Décalage vers le haut pour afficher le texte */
                opacity: 1; /* Affiche le texte */
            }

            .btn-details:hover,
            .btn-details:focus {
                color: #fff; /* Changement de couleur du texte au survol */
                background-color: #000; /* Changement de couleur de fond au survol */
                border-color: #000; /* Changement de couleur de la bordure au survol */
            }

        button[type="submit"] {
            padding: 10px 20px;
            background-color: #fff; /* Couleur de fond du bouton */
            color: #333; /* Couleur du texte */
            border: 2px solid #333; /* Bordure solide */
            border-radius: 5px;
            cursor: pointer;
            font-size: 1em;
            transition: background-color 0.3s ease, color 0.3s ease; /* Transition douce pour le changement de couleur */
        }

            button[type="submit"]:hover {
                background-color: #333; /* Changement de couleur de fond au survol */
                color: #fff; /* Changement de couleur du texte au survol */
            }

    </style>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/css/all.min.css">
</head>
<body>
    <h1>@ViewData["Title"]</h1>
    <form method="get">
        <div class="form-group">
            <label for="methodFilter">Méthode:</label>
            <select id="methodFilter" name="methodFilter" class="form-control">
                <option value="">Sélectionnez une méthode</option>
                <option value="Analytique">Analytique</option>
                <option value="SVM">SVM</option>
                <option value="KNN">KNN</option>
                <option value="RandomForest">Random Forest</option>
           
            </select>
         <!-- Ajoutez d'autres options selon vos besoins 
            <input type="text" id="methodFilter" name="methodFilter" value="@ViewData["MethodFilter"]" class="form-control" />
        -->
        </div>
        @if (!User.IsInRole("Admin"))
        {
           <div class="form-group">
                <label for="userFilter">Utilisateur:</label>
                <select id="userFilter" name="userFilter" class="form-control">
                    <option value="">Sélectionnez un utilisateur</option>
                            @foreach (var user in ViewBag.Users)
                            {
                            <option value="@user">@user</option>
                            }
                </select>
           </div>
        }



        <div class="form-group">
            <label for="dateFilter">Date:</label>
            <input type="date" id="dateFilter" name="dateFilter" value="@ViewData["DateFilter"]" class="form-control" />
        </div>
        <button type="submit" class="btn btn-primary">Filtrer</button>
    </form>

    <table class="table">
        <thead>
            <tr>
                <th>
                    @Html.DisplayNameFor(model => model.NomMethode)
                </th>
                <!--
                <th>
                    Html.DisplayNameFor(model => model.Details)
                </th>-->
                <th>
                    @Html.DisplayNameFor(model => model.Performance)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.MatriceConfusion)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.Temps_Execution)
                </th>
                <!--<th>
                    Html.DisplayNameFor(model => model.User.UserName)
                </th>-->
                <th>
                    @Html.DisplayNameFor(model => model.User.UserName)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.Simulation.DateSimulation)
                </th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var item in Model)
            {
                <tr>
                    <td>
                        @Html.DisplayFor(modelItem => item.NomMethode)
                    </td>
                    <!--
                    <td>
                        Html.DisplayFor(modelItem => item.Details)
                    </td>-->
                    <td>
                        @Html.DisplayFor(modelItem => item.Performance)
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.MatriceConfusion)
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.Temps_Execution)
                    </td>
                    <!--<td>
                        Html.DisplayNameFor(model => model.User.UserName)

                    </td>-->
                    <td>
                        @Html.DisplayFor(modelItem => item.User.UserName)
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.Simulation.DateSimulation)
                    </td>
                    <td>
                        <a href="@Url.Action("Details", "ExecutionMethodes", new { id = item.Id })" class="btn btn-details"><i class="fas fa-eye"></i></a>
                    </td>
                    
                </tr>
            }
        </tbody>
    </table>


</body>
</html>
